
给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。

示例 1:

输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
示例 2:

输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。

class Solution {
    public int maxProduct(int[] nums) {
        
        int posMax = nums[0];//最大值标记
        int negMax = nums[0];//负数最小值标记
        int result = nums[0];//最终结果
        
        for(int i=1;i<nums.length;i++){
            
           int temposMax = posMax;//每一次循环的最大值更新
           int temnegMax = negMax;//每一次循环的最小值更新
            
            posMax = Math.max(nums[i],Math.max(temposMax*nums[i],temnegMax*nums[i]));//上一次的最大值和最小值（负数）与本次循环数相乘，取出最大值并与本次循环数比较，取得新的最大值。
            negMax = Math.min(nums[i],Math.min(temposMax*nums[i],temnegMax*nums[i]));//上一次的最大值和最小值（负数）与本次循环数相乘，取出最小值并与本次循环数比较，取得新的最小值
            result = Math.max(posMax,result);//每一次的最大值与上一次最大值比较取得最大值。
        }
        
        return result;
        
    }
}
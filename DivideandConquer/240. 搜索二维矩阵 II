编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：

每行的元素从左到右升序排列。
每列的元素从上到下升序排列。
示例:

现有矩阵 matrix 如下：

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。

给定 target = 20，返回 false。

解法一：从头到尾一一遍历 java实现。

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        int row = matrix.length;
        if(row == 0) return false;
        int len = matrix[0].length;
        
        for(int i=0;i<row;i++){
            for(int j=0;j<len;j++){
                if(matrix[i][j] == target){
                    return true;
                }
            }
        }
        return false;
    }
}

解法二:建立坐标，根据大小进行遍历，最坏复杂度明显下降，c++实现。
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        if(matrix.size() == 0) return false;
        int x = matrix.size() - 1;
        int y = 0;
        
        while(y<matrix[0].size() && x>=0){
            if(matrix[x][y] == target) return true;
            else if(matrix[x][y] > target) x--;
            else
                y++;
        }
        return false;
    }
};
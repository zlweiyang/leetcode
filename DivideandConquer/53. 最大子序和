给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

解法一：最原始暴力，时间复杂度O(n的3次方)，直接超时

解法二：带有动态规划的暴力，时间复杂度O(n),耗时688ms，优点丢人

解法三：参考解答，动态规划，其基本思路就是判断累积和的正负，从而决定是否相加。时间复杂度为O(n),12ms
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        
        int maxres = nums[0];
        int sum = 0;
        for(int i=0;i<nums.size();i++){
                if(sum < 0) sum = 0;
                sum += nums[i];
                maxres = max(sum,maxres);
        }
        return maxres;
    }
};

解法四:看看大神的分治算法，虽然这个题目没必要，但是还是想学一下分治的思想。
暂时还没搞懂。
给定一个二叉树，判断它是否是高度平衡的二叉树。

本题中，一棵高度平衡二叉树定义为：

一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。

示例 1:

给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7
返回 true 。

示例 2:

给定二叉树 [1,2,2,3,3,null,null,4,4]

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
返回 false 。

所谓平衡二叉树是指二叉树的左右两个子树的高度差的绝对值不超过1
class solution{
 public:
       bool isBalanced(TreeNode *root)
	   {
	       if(root == NULL) return true;
		   if(abs(getDepth(root->left)-(getDepth(root->right))>1) return false;
		   return isBalanced(root->left)&&(root->right)；
	   }
	   //设计一个判断树的深度的函数
	   int getDepth(TreeNode *root)
	   {
	      if(root == NULL) return 0;
		  return max(getDepth(root->left),getDepth(root->right));
	   }
}

给定两个二叉树，编写一个函数来检验它们是否相同。

如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

示例 1:

输入:       1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

输出: true
示例 2:

输入:      1          1
          /           \
         2             2

        [1,2],     [1,null,2]

输出: false
示例 3:

输入:       1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

输出: false
您是否在真实的面试环节中遇到过这道题目呢？  

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//只能说自己水平实在太差，这种基础题都是看答案才做出来
//总的来说树的递归调用确实很方便，但是递归就造成极大的时间复杂度
方法一：
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        
       if( p==null && q==null)
           return true;
       else if(p==null || q==null){
            return false;
        }
       else if(p.val != q.val){
            return false;
        }
        else{
            return (isSameTree(p.left,q.left))&&(isSameTree(p.right,q.right));
        }
        
    }
}

方法二：关键限制条件导致时间复杂度不一致
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        
        if(p == NULL && q == NULL){
            return true;
        }
        else if(p == NULL){
            return false;
        }
        else if(q == NULL){
            return false;
        }
        if(p->val == q->val){
            return isSameTree(p->left,q->left)&&isSameTree(p->right,q->right);
        }
        return false;
    }
};

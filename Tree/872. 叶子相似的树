请考虑一颗二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 叶值序列 。



举个例子，如上图所示，给定一颗叶值序列为 (6, 7, 4, 9, 8) 的树。

如果有两颗二叉树的叶值序列是相同，那么我们就认为它们是 叶相似 的。

如果给定的两个头结点分别为 root1 和 root2 的树是叶相似的，则返回 true；否则返回 false 。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    //Stack<Integer>stack = new Stack<Integer>();
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
         Stack<Integer> stack1= new Stack<Integer>();
         Stack<Integer> stack2 = new Stack<Integer>();
         findLeaf(root1,stack1);
         findLeaf(root2,stack2);
         if((stack1.size() != stack2.size())||(stack1.size() == 0 && stack2.size() == 0 )){
             return false;
         }
         else{
             while(!stack1.empty()){
                 if(stack1.peek() != stack2.peek()){
                     return false;
                 }
                 stack1.pop();
                 stack2.pop();
             }
         }
        return true;
    }
    
    //定义一个函数寻找叶子节点
    public void findLeaf(TreeNode root,Stack<Integer> stack){
            if(root.left == null && root.right == null){
                stack.push(root.val);
            }
            if(root.left != null){
                findLeaf(root.left,stack);
            }
            if(root.right != null){
                findLeaf(root.right,stack);
            }
        }
}

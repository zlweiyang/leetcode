给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。

注意：两个节点之间的路径长度由它们之间的边数表示。

示例 1:

输入:

              5
             / \
            4   5
           / \   \
          1   1   5
输出:

2
示例 2:

输入:

              1
             / \
            4   5
           / \   \
          4   4   5
输出:

2
注意: 给定的二叉树不超过10000个结点。 树的高度不超过1000

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    int res = 0;
    public int longestUnivaluePath(TreeNode root) {
        
       findDepth(root);//遍历树
       return res;//返回全局变量
    }
    
    public int findDepth(TreeNode root){
        if(root == null) return 0;
        int left_depth = findDepth(root.left);//递归查找深度
        int right_depth = findDepth(root.right);
        
        left_depth = (root.left != null && root.val == root.left.val) ? left_depth+1:0;//左子树连续相等加1
        right_depth = (root.right != null && root.val == root.right.val) ? right_depth+1:0;//右子树连续相等加1
        
        res = Math.max(left_depth + right_depth,res);//比较新生结果和上一次结果取最大值
        return Math.max(left_depth,right_depth);//保留最大深度值
    }
}
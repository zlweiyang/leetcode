在MATLAB中，有一个非常有用的函数 reshape，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。

给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。

重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。

如果具有给定参数的示例 1:

输入: 
nums = 
[[1,2],
 [3,4]]
r = 1, c = 4
输出: 
[[1,2,3,4]]
解释:
行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。
示例 2:

输入: 
nums = 
[[1,2],
 [3,4]]
r = 2, c = 4
输出: 
[[1,2],
 [3,4]]
解释:
没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。reshape操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。

解法一 蛮力遍历
class Solution {
    public int[][] matrixReshape(int[][] nums, int r, int c) {
        int len = nums.length;
        int len1 = nums[0].length;
        int[][]result = new int[r][c];
        if(len*len1 == r*c){
            int [] temp = new int[len*len1];
            int k=0;
        for(int i=0; i<len;i++){//将原数组中的数据在新的数组中进行重新排列
            for(int j=0;j<len1;j++ ){
                temp[k] = nums[i][j];
                k++;
            }
          }
        int t = 0;
        //将新的数组转化为r*c的新的矩阵
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                result[i][j] = temp[t];
                t++;
            }
        }
        return result;
      
        }else{
            return nums;//如果数组的行和列的乘积不等于r*c，则直接返回原数组
        }
    }
}

解法二 巧妙运用数组的特性

class Solution {
    public int[][] matrixReshape(int[][] nums, int r, int c) {
        int len = nums.length;
        int len1 = nums[0].length;
        int[][]result = new int[r][c];
        if(len*len1 == r*c){
        for(int i=0;i<r*c;i++){
            result[i/c][i%c] = nums[i/len1][i%len1];//将原数组每一行没一个数一一放入一个新的数组，新的数组有c列，第一行放入c各元素，接下来继续放入一行，同理如果放不下，则放入下一行，简单方便，复杂度降低
        }
        return result;
      
        }else{
            return nums;//如果数组的行和列的乘积不等于r*c，则直接返回原数组
        }
    }
}
给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

说明：你不能倾斜容器，且 n 的值至少为 2。



图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

 

示例:

输入: [1,8,6,2,5,4,8,3,7]
输出: 49

解法一：暴力穷举 300ms
两层for循环
时间复杂度O(n^2);
class Solution {
    public int maxArea(int[] height) {
        
        int maxarea = 0;
        int high = 0;
        // Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        // for(int i=0;i<height.length;i++){
        //     map.put(i,height[i]);
        // }
        for(int i=0;i<height.length;i++){
            for(int j=i+1;j<height.length;j++){
                //high = map.get(i) < map.get(j) ? map.get(i):map.get(j);
                high = height[i] < height[j]? height[i]:height[j];
                if(high*(j - i) > maxarea){
                    maxarea = high*(j - i);
                }
            }
        }
        
        return maxarea;
        
    }
}

解法二：从两边开始判断并查找，30ms时间复杂度应该只有O(n)
class Solution {
public:
    int maxArea(vector<int>& height) {
        
        int maxarea = 0;
        int high = 0;
        int i = 0;
        int j = height.size() - 1;
        //w = j - i;
        int w = 0;
        while(i<j){
            if(height[i] < height[j]){
                high = height[i];
                w = j - i;
                i++;
            }else{
                high = height[j];
                w = j - i;
                j--;
            }
            
            if(high*w > maxarea){
                maxarea = high*w;
            }
        }
        
        return maxarea;
        
    }
};

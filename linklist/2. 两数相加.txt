给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807


class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        int sum = 0;//对应两节点的值之和
        int num = 0;//进位值
        int result = 0;//当前节点所得值
        ListNode head=null;//定义一个头结点代表新生成的链表
        ListNode current = null;//用于移动的节点
    
        while((l1 != null) || (l2 != null) || (num !=0)){
            //ListNode l3 = new ListNode(0);
            sum = ((l1 != null) ? l1.val:0) + ((l2 != null) ? l2.val:0) + num;
            num = sum/10; 
            result = sum%10;
            ListNode l3 = new ListNode(result);//每新生成一个节点就将结果赋值进去
            l1 = l1 != null ? l1.next:null;
            l2 = l2 != null ? l2.next:null; 
            
            if(current == null){
                current = l3;//新节点赋值给移动节点
                head = current;//第一个节点
            }else
            {
                current.next = l3;//新节点连接上头结点
                current = current.next;//移动节点移动始终指向最后一个节点，没有指向空，只是在链表后面添加节点
            }
        }
        return head;
    }
}
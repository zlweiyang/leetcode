
给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：

给定一个链表: 1->2->3->4->5, 和 n = 2.

当删除了倒数第二个节点后，链表变为 1->2->3->5.
说明：

给定的 n 保证是有效的。

进阶：

你能尝试使用一趟扫描实现吗？

解法一:24ms

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        
        
        if(head == null || head.next == null) return null;
        
        
        ListNode temp = head;
        int count = 0;
        while(temp != null){
            count++;
            temp = temp.next;
        }
        int i=1;
        ListNode tmp = head;
        if(n == count) return head.next;
        while(i<count - n ){
            i++;
            tmp = tmp.next;
        }
        tmp.next = tmp.next.next;
        
        return head;
    }
}
解法2:20ms c++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        ListNode *first = head;
        while(n-- != 0){
            first = first->next;
        }
        
        if(first == NULL){
            return head->next;
        }
        
        ListNode *second = head;
        while(first->next != NULL){
            first = first->next;
            second = second->next;
        }
        
        second->next = second->next->next;
        //second = second->next;
        return head;
    }
};
解法三：尝试一遍遍历
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        
        
        ListNode end = head;
        ListNode pre = head;
        
        for(int i=1;i<=n;i++){
            end = end.next;
        }
        if(end == null){
            return pre.next;
        }
        
        while(end.next != null){
            end=end.next;
            pre=pre.next;
        }
        pre.next = pre.next.next;
        
        return head;
        }
}
